{"version":3,"sources":["components/navbar.js","components/header.js","components/main.js","components/footer.js","components/image.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","message","correct","topscore","Header","Main","children","Footer","Image","console","log","src","alt","name","onClick","pickImg","App","state","picked","shuffleArray","array","imgArray","Img","i","length","j","Math","floor","random","indexOf","setState","concat","this","map","image","url","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"46BAaeA,EAXA,SAACC,GAAD,OAEb,yBAAKC,UAAU,+BACb,0BAAMA,UAAU,wBAAhB,eACA,0BAAMA,UAAU,uBAAuBD,EAAME,SAC7C,0BAAMD,UAAU,0CAAhB,UACS,8BAAOD,EAAMG,SADtB,mBAEa,8BAAOH,EAAMI,aCAfC,EAPA,kBACb,yBAAKJ,UAAU,iBACb,wBAAIA,UAAU,eAAd,mBACA,wBAAIA,UAAU,eAAd,0FCEWK,EALF,SAACN,GAAD,OACP,yBAAKC,UAAU,yBACZD,EAAMO,WCQAC,EAVA,kBAEf,4BAAQP,UAAU,kBACd,yBAAKA,UAAU,aACb,0BAAMA,UAAU,aAAhB,sBCCSQ,EALD,SAACT,GAEX,OADAU,QAAQC,IAAIX,EAAMY,KACV,yBAAKA,IAAKZ,EAAMY,IAAKC,IAAKb,EAAMc,KAAMb,UAAU,iCAAiCc,QAAS,kBAAMf,EAAMgB,QAAQhB,EAAMc,U,OCiGjHG,G,iNAxFbC,MAAQ,CACNC,OAAQ,GACRhB,QAAS,EACTC,SAAU,EACVF,QAAS,2B,EAIbkB,aAAe,SAACC,GAEd,IADA,IAAIC,EAAWC,EACNC,EAAIF,EAASG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADI,EAEf,CAACF,EAASI,GAAIJ,EAASE,IAAnDF,EAASE,GAFkC,KAE9BF,EAASI,GAFqB,KAI9C,OAAOJ,G,EAGPN,QAAU,SAACF,GACTJ,QAAQC,IAAI,aACZ,IAAIQ,EAAS,EAAKD,MAAMC,QAEM,IAA1BA,EAAOW,QAAQhB,IACjB,EAAKiB,SAAS,CACZZ,OAAQA,EAAOa,OAAOlB,GACtBX,QAAS,EAAKe,MAAMf,QAAU,EAC9BC,SAAU,EAAKc,MAAMf,QAAU,EAAI,EAAKe,MAAMd,SAAW,EAAKc,MAAMf,QAAU,EAAI,EAAKe,MAAMd,SAC7FF,QAAS,0BAEX,EAAKkB,gBAGL,EAAKW,SAAS,CACZ7B,QAAS,sCACTC,QAAS,EACTgB,OAAQ,M,wEAoCJ,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQhB,QAAS8B,KAAKf,MAAMf,QAASC,SAAU6B,KAAKf,MAAMd,SAAUF,QAAS+B,KAAKf,MAAMhB,UACxF,kBAAC,EAAD,MACA,kBAAC,EAAD,KACG+B,KAAKb,aAAaG,GAAKW,IAAI,SAAAC,GAE3B,OADCzB,QAAQC,IAAIwB,GAEZ,kBAAC,EAAD,CAAOvB,IAAKuB,EAAMC,IAAKtB,KAAMqB,EAAMrB,KAAMuB,IAAKF,EAAMrB,KAAME,QAAS,EAAKA,aAG5E,kBAAC,EAAD,W,GAnFUsB,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.385081ac.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = (props) => (\n\n  <nav className=\"navbar navbar-light bg-info\">\n    <span className=\"navbar-brand mb-0 h1\">Clicky Game</span>\n    <span className=\"text-center mb-0 h3\">{props.message}</span>\n    <span className=\"navbar-text text-dark font-weight-bold\">\n      Score: <span>{props.correct}</span>&nbsp;\n      Top Score: <span>{props.topscore}</span>\n    </span>\n  </nav>\n)\nexport default Navbar;","import React from \"react\";\n\nconst Header = () => (\n  <div className=\"jumbotron p-3\">\n    <h1 className=\"text-center\">Dog Memory Game</h1>\n    <h3 className=\"text-center\">Earn points with each click but click on any one more than once and the game resets!</h3>\n  </div>\n\n)\nexport default Header;","import React from \"react\";\n\nconst Main = (props) =>\n      <div className=\"container text-center\">\n        {props.children}\n      </div>\n\nexport default Main;","import React from 'react';\n\nconst Footer = () => (\n\n<footer className=\"footer bg-info\">\n    <div className=\"container\">\n      <span className=\"text-dark\">Patrick Follett\n      </span>\n  </div>\n</footer>\n\n)\nexport default Footer;","import React from 'react';\n\nconst Image = (props) => {\n    console.log(props.src)\n    return (<img src={props.src} alt={props.name} className=\"img-thumbnail clickable-images\" onClick={() => props.pickImg(props.name)} />)}\n\n\nexport default Image;\n","import React, { Component } from 'react';\nimport Navbar from \"./components/navbar\";\nimport Header from \"./components/header\";\nimport Main from \"./components/main\";\nimport Footer from \"./components/footer\";\nimport Image from \"./components/image\";\nimport Img from \"./components/images.json\";\n\n\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    picked: [],\n    correct: 0,\n    topscore: 0,\n    message: 'Click an image to begin'\n  };\n\n//Shuffle Array\nshuffleArray = (array) => {\n  let imgArray = Img;\n  for (let i = imgArray.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [imgArray[i], imgArray[j]] = [imgArray[j], imgArray[i]];\n  }\n  return imgArray\n}\n\n  pickImg = (name) => {\n    console.log(\"Clicked!!\");\n    let picked = this.state.picked;\n    \n    if (picked.indexOf(name) === -1) {\n      this.setState({\n        picked: picked.concat(name),\n        correct: this.state.correct + 1,\n        topscore: this.state.correct + 1 > this.state.topscore ? this.state.correct + 1 : this.state.topscore,\n        message: \"Correct: Good choice!\" \n      })\n      this.shuffleArray();\n    }\n    else {\n      this.setState({\n        message: \"Already Selected Game Over, Replay?\",\n        correct: 0,\n        picked: []\n      })\n    }\n  }\n\n  // imgSwitch = (name) => {\n  //   switch (name) {\n  //     case \"dancingdog\":\n  //       return `${dancingdog}`\n  //     case \"doggpihy1\":\n  //       return `${doggiphy}`\n  //     case \"drivingdog\":\n  //       return `${drivingdog}`\n  //     case \"exercisedog\":\n  //       return `${exercisedog}`\n  //     case \"floatingdog\":\n  //       return `${floatingdog}`\n  //     case \"happydog\":\n  //       return `${happydog}`\n  //     case \"hiddendog\":\n  //       return `${hiddendog}`\n  //     case \"pizzadog\":\n  //       return `${pizzadog}`\n  //     case \"scooterdog\":\n  //       return `${scooterdog}`\n  //     case \"slidingdog\":\n  //       return `${slidingdog}`\n  //     case \"smilesdog\":\n  //       return `${smilesdog}`\n  //     case \"typingdog\":\n  //       return `${typingdog}`\n  //     default:\n  //       return `${typingdog}`\n  //   }\n  // }\n\n  render() {\n    return (\n      <div>\n        <Navbar correct={this.state.correct} topscore={this.state.topscore} message={this.state.message}/>\n        <Header />\n        <Main>\n          {this.shuffleArray(Img).map(image => {\n            console.log(image)\n           return (\n            <Image src={image.url} name={image.name} key={image.name} pickImg={this.pickImg}  />\n          )})}\n        </Main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}